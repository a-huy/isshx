#!/usr/bin/env python
# -*- coding: utf-8 -*-


import argparse
import sys
import subprocess


OSASCRIPT_EXE = 'osascript'
OSASCRIPT_OPTIONS = ['-e']
OSASCRIPT_TEMPLATE = """-- Launch iTerm and log into multiple servers using SSH
on run args
    launch application "iTerm"
    tell application "iTerm"
        activate
        -- figure out how many rows and columns are needed to represent the number of windows
        set num to count of args
        if count of args < 1 then
            return "No servers given"
        end if
        set found to 0
        set windowrows to 1
        set windowcols to 1
        repeat with r from 1 to round (num ^ 0.5) rounding up
            repeat with c from 1 to r
                if r * c >= num then
                    exit repeat
                end if
            end repeat
            if r * c >= num then
                set windowrows to r
                set windowcols to c
                exit repeat
            end if
        end repeat
        set closingErrorMessage to ""

        -- create a new window and track its id with mywindow
        set mywindow to create window with default profile

        -- maximizes the window with the default zoom keybind
        tell application "System Events" to keystroke "=" using {{command down, option down}}

        -- This is much more robust way of maximizing the window, but requires accessibility privileges to work
        (*
        try
            tell application "System Events"
                tell process "iTerm2"
                    click menu item "Zoom" of menu "Window" of menu bar 1
                end tell
            end tell
        on error errStr number errorNumber
            if errorNumber = -1719 then
                set closingErrorMessage to "Unable to resize created iTerm window, enable assistive device access to this terminal application in System Preferences -> Security & Privacy -> Privacy -> Accessibility to allow isshx to maximize the created iTerm window"
            end if
        end try
        *)

        -- horizontally splits the window for each of the rows, leaving the top most pane with the focus
        repeat windowrows - 1 times
            tell current session of mywindow
                split horizontally with default profile
            end tell
        end repeat

        -- for each row, split the pane vertically moving the focus to the right each time and then push the focus after all splits to move to the pane on the next row
        repeat with r from 1 to windowrows
            repeat with c from 1 to windowcols - 1
                if c +  (r - 1) * windowcols ≥ num then
                    exit repeat
                end if
                tell application "System Events" to keystroke "d" using command down
            end repeat
            if c +  (r - 1) * windowcols ≥ num then
                exit repeat
            end if
            tell application "System Events" to keystroke "]" using command down
            delay 0.01
        end repeat

        -- send the ssh commands to each of the panes
        set i to 1
        repeat with sess in sessions of current tab of mywindow
            select sess
            tell current session of mywindow
                write text "ssh " & item i of args {options_string}
            end tell
            set i to i + 1
        end repeat

    end tell
    return closingErrorMessage
end run
"""


def format_template(pseudo_terminal=False, remote_command=None):
    preamble = '& "'
    options_string = preamble
    if pseudo_terminal:
        options_string += ' -t'
    if remote_command:
        options_string += ' \'{}\''.format(remote_command)
    if options_string == preamble:
        options_string = ''
    else:
        options_string += '"'
    return OSASCRIPT_TEMPLATE.format(options_string=options_string)


def read_arguments():
    parser = argparse.ArgumentParser(
        prog='py-isshx',
        description='iTerm2 Enhancement tool to control multiple SSH hosts simulataneously',
    )
    parser.add_argument(
        'hosts', nargs='+',
        help='Hosts to create a secure shell session to'
    )
    parser.add_argument(
        '-r', '--remote_command',
        help='Run a remote command on each host (passthrough option for ssh)'
    )
    parser.add_argument(
        '-t', '--terminal', action='store_true',
        help='Force pseudo-terminal allocation (passthrough option for ssh)'
    )

    return parser.parse_args()


if __name__ == '__main__':
    args = read_arguments()

    subprocess.call(
        [OSASCRIPT_EXE]
        + OSASCRIPT_OPTIONS
        + [format_template(
            args.terminal, args.remote_command
        )]
        + (args.hosts or [])
    )
